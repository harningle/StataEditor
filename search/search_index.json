{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"StataEditor for Sublime Text 3/4","text":"\ud83d\udda5\ufe0f Demo |      \ud83d\udd0d Installation Guide <p>A Sublime Text plugin for Stata. Based on original work by Mattias Nordin and Sergio Correia!</p>"},{"location":"#features","title":"Features","text":"<p>This plugin enables us to run Stata code from Sublime Text 3/4, with the following features:</p> <ul> <li>Syntax highlighting</li> <li>Use \"GoTo Symbol\" to navigate through the do files</li> <li>Code snippets for frequently used commands</li> <li>And ALL the features coming with Sublime Text and other plugins!</li> <li>(, which includes Copilot )</li> </ul>"},{"location":"#installation-and-configuration","title":"Installation and Configuration","text":"<p>Install from this repository via Package Control, and set your Stata installation directory in user settings. Step-by-step guide here.</p>"},{"location":"#using-stataeditor","title":"Using StataEditor","text":"<p>Read more about the features, keyboard shortcuts and code snippets. A video demo for doing summary statistics, scatter plot, and regression here.</p>"},{"location":"config/","title":"Configuration","text":"<p>There are a few more steps to get the plugin work. You can find a video guide from installation to configuration at the bottom of this page.</p>"},{"location":"config/#configure-stataeditor","title":"Configure StataEditor","text":"<p>There are a few required and optional arguments to be specified. Open Sublime Text &gt; Preferences &gt; Package Settings &gt; StataEditor &gt; Settings \u2013 User. An empty file will pop up. You can copy the template setting below, paste it into the empty file, and change the Stata version and path to your own.</p> <pre><code>{\n    /* true = Add an empty line at the end of the do file. It's recommended to\n       set it to be true, since Stata builtin editor needs an empty line at the\n       end of a do file to run properly. (This empty line is automatically done\n       in Stata default do file editor so you may not realise it before)\n    */\n    \"ensure_newline_at_eof_on_save\": true,\n\n    /* Your Stata `.exe` path */\n    \"stata_path\": \"C:/Program Files/Stata17/StataMP-64.exe\",\n\n    /* Your Stata version. We only need the integer part. That is, type 16 if\n       your Stata version is 16.1\n    */\n    \"stata_version\": 17,\n\n    /* Character encoding. \"utf-8\" is recommended for Stata 15 and later. For\n       earlier versions and non-latin environment (e.g. Stata in Chinese or\n       Japanese), you may want to use \"gbk\"\n    */\n    \"character_encoding\": \"utf-8\",\n\n    /* true = enable variable auto-completion */\n    \"variable_completions\": true,\n\n    /* true = enable function auto-completion */\n    \"function_completions\": true,\n\n    /* true = enable command auto-completion */\n    \"command_completions\": true,\n\n    /* The working directory in Stata when you establish an initial Stata\n       connection from Sublime Text.\n       \"current_path\" = where your currently opened do file is located\n    */\n    \"default_path\": \"current_path\",\n\n    /* Which types of files should be included in filename auto-completion. Note\n       that if your folders containing an huge amount of files, this can lead to\n       memory leaks. If so, simply change the setting to \"false\".\n       false = disable such auto-completion\n       To enable file completions, enter the file extensions you wish to be\n       enabled separated by commas\n    */\n    \"file_completions\": \"dta, do, py, xlsx, xls, csv, txt\",\n\n    /* The waiting time in seconds from that Stata is launched until the\n       commands are being sent. With zero waiting time, Stata may be launched\n       twice. Only matters for Stata 15 and later. Change waiting time as\n       needed. The default 0.5 seconds is often fine\n    */\n    \"waiting_time\": 0.5\n}\n</code></pre> <p>Example setting</p> <p>To say, I use Stata 16.1, and it's installed in <code>D:/Economics/Stata16/StataMP-64.exe</code>. There are thousands of files in my project, so I want to disable file name auto-completion to speed up the plugin.</p> <pre><code>{\n    \"ensure_newline_at_eof_on_save\": true,\n    \"stata_path\": \"D:/Economics/Stata16/StataMP-64.exe\",\n    \"stata_version\": 16,\n    \"character_encoding\": \"utf-8\",\n    \"variable_completions\": true,\n    \"function_completions\": true,\n    \"command_completions\": true,\n    \"default_path\": \"current_path\",\n    \"file_completions\": false,\n    \"waiting_time\": 0.5\n}\n</code></pre>"},{"location":"config/#register-the-stata-automation-type-library","title":"Register the Stata Automation Type Library","text":"<p>To allow Sublime Text to talk with Stata, we need to use a Stata Automation object. You may refer to the official guide, or in short:</p> <ol> <li>Press Win+R, type <code>cmd</code>, and then press Ctrl+Shift+Enter to run Command shell as Administrator. You will see a window with prompt like <code>C:\\WINDOWS\\system32&gt;</code></li> <li>Go to Stata installation directory using <code>cd</code>. E.g., if your Stata in in <code>C:/Program Files/Stata17</code>, then type <code>cd \"C:/Program Files/Stata17\"</code> and press Enter. The quotes are necessary if the path includes whitespace. After this step, the prompt will change to <code>C:\\Program Files\\Stata17&gt;</code></li> <li>Type <code>./StataMP-64.exe /Register</code> and press Enter to register. If you use Stata SE or other version then change the executable filename accordingly</li> <li>Nothing fancy will happen but it's already properly registered</li> </ol> <p>CMD, PowerShell, Terminal?</p> <p>Newer Windows comes with more than one command-line shells, including Command Prompt, Terminal or PowerShell. The above steps may or may not work. Whenever possible, use Command shell (cmd).</p> <p>Need admin rights</p> <p>We must run <code>./StataMP-64.exe /Register</code> as admin. If you see errors like <code>AttributeError: 'module' object has no attribute 'stata'</code> in Sublime Text console, please re-register Stata library as admin. See #1 for more details.</p> <p>Close and restart Sublime Text. Now we are ready to start!</p>"},{"location":"config/#copilot-optional","title":"Copilot (optional)","text":"<p>GitHub Copilot uses Codex, which is a descendant of GPT-3 by OpenAI, the company that created ChatGPT, to suggest code in near real-time. Basically, you write the comment or part of the code, and Copilot auto-complete the rest for you. It's a great tool to boost productivity! There is no official support of Copilot for Sublime Text, but community members have made it possible. One such tool is LSP-copilot. You can find the installation and setup instruction on its repository.</p> <p>Copilot may not work well with Stata</p> <p>Personally I discourage using Copilot for Stata. The reason is simple: Copilot does not understand Stata syntax well, partly due to a lack of Stata code in its training data. (Just think about how many CS papers publish their code on GitHub, and how many econ papers have their replication files available online...) As a result, it may suggest wrong code very often. Below is an example where Copilot is wrong (the coefficients are completely hallucination).</p> <p></p>"},{"location":"config/#video-tutorial","title":"Video Tutorial","text":""},{"location":"contributing/","title":"Contributing","text":"<p>The package is still at work-in-progress stage. All comments and suggestions are most welcome!</p>"},{"location":"contributing/#reporting-issues","title":"Reporting issues","text":"<p>If anything does not work as expected, feel free to do not hesitate to open a new issue on GitHub. For first time GitHub users, see here. In your bug report, it's better to have:</p> <ul> <li> <p>A short and informative title</p> <p> \u201ctwsc\u201d does not trigger scatter plot</p> <p> code snippet not working</p> </li> <li> <p>A minimal and self-contained code/steps to reproduce the bug</p> <p> Type \u201ctwsc\u201d and press Tab but nothing happens</p> <p> I use scatter plot snippet</p> </li> <li> <p>The current outcome</p> <p> \u201ctwsc\u201d + Tab gives \u201ctwsc\u00a0\u00a0\u00a0\u00a0\u201d (twsc with four whitespaces)</p> <p> nothing happens</p> </li> <li> <p>The expected outcome</p> <p> It should trigger <code>https://github.com/harningle/StataEditor/blob/master/Twoway%20scatter.sublime-snippet</code> </p> <p> a scatter plot template</p> </li> <li> <p>Log</p> <p> Press Ctrl+`, and copy the entire console log</p> <p> Nothing happens so I have absolutely no idea</p> </li> <li> <p>(Potential fix. If you have any idea to fix that, please tell me! You can open an issue and then a pull request)</p> </li> </ul>"},{"location":"contributing/#requesting-snippets","title":"Requesting snippets","text":"<p>If you have some frequently used code blocks and want to share with us, please check this and also open an issue (and create a PR if possible), with:</p> <ul> <li>A concise title as above</li> <li> <p>A trigger</p> <p> Ideally the trigger is \u201cmerg\u201d</p> <p> I want a code snippet for merge</p> </li> <li> <p>A complete code block</p> <p> <code>merge m:1 using \"some_data.dta\"</code></p> <p> It should give us Stata merge command</p> </li> <li> <p>The placeholders</p> <p> In the above code, the \u201c<code>m</code>\u201d, \u201c<code>1</code>\u201d, and \u201c<code>some_data.dta</code>\u201d can be modified</p> <p> I want 1:1, 1:m, and m:1 mode</p> </li> </ul>"},{"location":"contributing/#general-questions","title":"General questions","text":"<p>If you have any other questions, just open an issue!</p>"},{"location":"installation/","title":"Installation","text":"<p>The recommended way to install StataEditor is via Package Control. A video guide is also available here.</p>"},{"location":"installation/#install-sublime-text-34","title":"Install Sublime Text 3/4","text":"<p>First of all, we need Sublime Text installed (and Stata of course). Sublime Text is a text/source code editor with native support for many languages. With plugins, software like Stata also works well in it. To download and install, go to https://www.sublimetext.com/. It's recommended to do a complete installation, rather than using a portable version, because the configuration may be easier. It may be downloaded and evaluated for free, however a license must be purchased for continued use.</p> <p>3 or 4?</p> <p>This plugin works for both Sublime Text 3 and 4. 4 is the current version, and 3 is no longer updated since 2019. I personally prefer Sublime Text 3 slightly due to easier LaTeX and Markdown integration, but either version is OK for StataEditor.</p> Why 3?Why 4? <ul> <li>LaTeX plugin works much more smoothly in 3 (see SublimeText/LaTeXTools#1539, #1531, #1524, #1517, and #1490)</li> <li>Some Markdown plugin only supports 3</li> </ul> <ul> <li>Significant improvement from 3</li> <li>Copilot plugin only supports 4</li> </ul> <p>Stata version</p> <p>I've personally tested Stata 15, 16, and 17. Earlier versions could be supported but there is no guarantee.</p>"},{"location":"installation/#install-package-control","title":"Install Package Control","text":"<p>Open Sublime Text, and to install Package Control:</p> <ol> <li>Open the command palette (Ctrl+Shift+P on Windows, and StataEditor does not support Linux or Mac OS)</li> <li>Type <code>Install Package Control</code>, and press Enter</li> </ol>"},{"location":"installation/#install-stataeditor","title":"Install StataEditor","text":"<ol> <li>Open the command palette (Ctrl+Shift+P) again</li> <li>Type <code>Package Control: Add Repository</code>, and press Enter</li> <li>Type <code>https://github.com/harningle/StataEditor</code> in the input box at the bottom of Sublime Text window, and press Enter</li> <li>Do step 1 again (Ctrl+Shift+P)</li> <li>Type <code>Package Control: Install Package</code>, and press Enter. You may have to wait for a few seconds</li> <li>Type <code>StataEditor</code> and press Enter to install</li> <li>Do 3-5 again, but this time install <code>Pywin32</code></li> </ol> <p>Configure StataEditor and you are good to go!</p>"},{"location":"using/","title":"Using StataEditor","text":"<p>Below are the keyboard shortcuts and code snippets that come with this plugin. At the bottom there is a video demo.</p>"},{"location":"using/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"Shortcut Description Nothing selected, Ctrl+D Run the entire do file Some lines/characters selected, Ctrl+D Run the selected lines only. If any part of the line is selected, the entire line is included Ctrl+R Goto Symbol. A panel will appear where you can navigate through different code sections within the do file Code snippet trigger+Tab Use code snippet"},{"location":"using/#code-snippets","title":"Code snippets","text":"<p>A code snippet is a reusable code block. You can find all snippets in Sublime Text &gt; Tools &gt; Snippets. For example, to use the snippet for <code>-forvalues-</code>, type <code>forv</code> and press Tab, and you will see</p> <pre><code>forvalues i = 1(1)n {\n\n}\n</code></pre> <p>The cursor now selects the start index <code>1</code>. To change it, simply type in the desired number. Then press Tab, and the cursor will jump to the <code>1</code> inside the parenthesis, where you can change the step size. Press Tab again to move the cursor to <code>n</code>, where you can specify the end index. Finally, press Tab one last time to jump inside the curly brackets for the main loop body. This entire process can be completed without using a mouse or arrow keys!</p>"},{"location":"using/#auto-completion","title":"Auto-completion","text":"<p>The package comes with variable, command, function, and filename auto-completion. All of them support fuzzy match. Variable refers to all variables in the <code>.dta</code> file we currently open. Command and function find stuff like <code>-log-</code>, <code>-clear-</code>, <code>-logit-</code>, etc.</p> <p>Imperfect fuzzy match</p> <p>Sublime Text's fuzzy match algorithm (and in fact the entire Sublime Text) is not open source. So it may not work as you expected. My personal experience is to fuzzy match \u201csequentially\u201d. E.g. to match \u201cauto-completion\u201d, it's fine to type \u201catpn\u201d, since \u201ct\u201d is after \u201ca\u201d, \u201cp\u201d is after \u201ct\u201d, and so on. However, if you type \u201capcu\u201d, though all of the four letters are in the word, Sublime Text is not able to find \u201cauto-completion\u201d for you. That being said, in most cases, however you type it, Sublime Text can always find the word for you!</p> <p>If you are interested in the implementation of fuzzy match algorithm, here is a wonder blog to reverse engineer Sublime Text's fuzzy match. Moreover, tajmone/fuzzy-search collects a set of useful fuzzy search algorithm.</p> <p>Filename auto-completion is slightly more complicated. In the initial folder and all subfolders, the package recursively gets all files with certain extensions, and save their path in a list, when you establish the initial Stata connection from Sublime Text. Then, during your coding, it turns to the list and do (fuzzy) completion for you.</p> <p>Detailed explanation</p> Best practice: root directory as the \u201cinitial\u201d folderOnly include extensions you needPath are relative to initial folderSnippets overrules <p>The \u201cinitial\u201d folder refers to the directory containing the do file where you run the initial line(s). In the example project folder structure below, suppose you open <code>some_code.do</code> and run the first lines there, the file auto-completion will only suggest files located within <code>code folder</code>, and files like <code>something.docs</code> will not appear in the list. </p> <pre><code>root directory\n\u2502\n\u251c\u2500\u2500 something.docs\n\u251c\u2500\u2500 main_do_file.do\n\u2502\n\u251c\u2500\u2500 data folder\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 your_data.dta\n\u2502   \u2514\u2500\u2500 a sub data folder\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 data_a.xlsx\n\u2502       \u2514\u2500\u2500 data_b.xlsx\n\u2502   \n\u2514\u2500\u2500 code folder\n    \u2502\n    \u2514\u2500\u2500 some_code.do\n</code></pre> <p>The file list contains all files with certain extensions. You may want all <code>.dta</code> files, all <code>.xlsx</code> spreadsheets, and so forth. But it's less likely that your code involves <code>.docs</code>. You can change the extensions in Sublime Text &gt; Preferences &gt; Package Settings &gt; StataEditor &gt; Settings \u2013 User. You can add/delete extensions in <code>file_completions</code>. For example, to include <code>.exe</code> and <code>.rtf</code>, your setting file looks like:</p> <pre><code>{\n\"ensure_newline_at_eof_on_save\": true,\n    \"stata_path\": \"C:/Program Files/Stata18/StataMP-64.exe\",\n    \"stata_version\": 18,\n    \"character_encoding\": \"utf-8\",\n    \"variable_completions\": true,\n    \"function_completions\": true,\n    \"command_completions\": true,\n    \"default_path\": \"current_path\",\n    \"file_completions\": \"exe, rtf\",\n    \"waiting_time\": 0.5\n}\n</code></pre> <p>The auto-completed path will be relative to your initial folder. To illustrate it, we use the same example folder structure. If the initial Stata connection is established when running <code>main_do_file.do</code>, then the auto-completed path for <code>data_a.xlsx</code> will be <code>data folder/a sub data folder/data_a.xlsx</code>.</p> <pre><code>root directory\n\u2502\n\u251c\u2500\u2500 something.docs\n\u251c\u2500\u2500 main_do_file.do\n\u2502\n\u251c\u2500\u2500 data folder\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 your_data.dta\n\u2502   \u2514\u2500\u2500 a sub data folder\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 data_a.xlsx\n\u2502       \u2514\u2500\u2500 data_b.xlsx\n\u2502   \n\u2514\u2500\u2500 code folder\n    \u2502\n    \u2514\u2500\u2500 some_code.do\n</code></pre> <p>Code snippets has the highest priority. Suppose you have a variable called <code>forgive</code>, a command called <code>-forvalues-</code>, a file called <code>forever.csv</code>, and the built-in <code>forv</code> code snippet. The <code>forv</code> code snippet will pop up when you type \u201cforv\u201d and press Tab. So to match the file <code>forever.csv</code>, you may type something like <code>fve</code>, which avoids <code>forv</code> snippet trigger.</p> <p>Memory leak</p> <p>As you can imagine, if your folder has hundreds of thousands of files, it can be slow and lead to memory leak. My personal experience is, as long as the number of files is at the level of thousands, it works efficiently without any issues.</p> <p>When you establish the \u201cinitial\u201d Stata connection</p> <p>One shortcoming is that the file list never gets updated, unless you shutdown Sublime Text and Stata, and re-open them. For example, if you've opened Stata, run a few lines, and created a new <code>.dta</code>. This new <code>.dta</code> will not appear in the file auto-completion list, until you launch Sublime Text again.</p> <p>I'm working on this. Suggestions welcome!</p>"},{"location":"using/#video-demo","title":"Video demo","text":"<p>Below is a video demo for summary statistics, scatter plot, and regression.</p>"}]}